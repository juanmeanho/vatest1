{"version":3,"sources":["Toolbar.js","Home.js","serviceWorker.js","index.js"],"names":["Toolbar","react_default","a","createElement","className","index_es","icon","color","size","id","Component","library","add","faTv","faDoorClosed","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","menores","percentaje","consultores","_this2","axios","get","then","response","data","setState","console","log","numFiltered","filter","first_name","last_name","length","nu_menores","total","toFixed","catch","error","errored","src_Toolbar","style","height","overflowY","map","consultor","index","href","key","width","src","avatar","alt","menor","document","getElementById","ReactDOM","render","Home_Home","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83ae30ba.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nclass Toolbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-dark bg-primary navbar-expand-md\">\r\n                    <span className=\"navbar-brand mb-0 h1\">\r\n                    <FontAwesomeIcon icon=\"tv\" color=\"white\" size=\"lg\" />{'  '}\r\n                        Vates Test 1</span>\r\n                        <div className=\"collapse navbar-collapse d-flex flex-row-reverse\" id=\"navbarNav\">\r\n                    <FontAwesomeIcon icon=\"door-closed\" color=\"white\" size=\"lg\" />{' '}\r\n\r\n                            <ul className=\"navbar-nav\">\r\n\r\n                                <li className=\"nav-item active\">\r\n                                        {/* <a className=\"nav-link\" href=\"#\">Salir <span className=\"sr-only\">(current)</span></a> */}\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toolbar;\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Toolbar from './Toolbar';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport axios from 'axios';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTv, faDoorClosed } \nfrom '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTv, faDoorClosed);\n\nexport default class Home extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n          menores : [],\n          percentaje: null,\n          consultores: [],\n        };\n    }\n\n\n    componentDidMount() {\n        axios\n              .get('https://reqres.in/api/users?page=1&per_page=12')\n              .then(response => {\n\n                const consultores = response.data.data\n                this.setState({ consultores });\n                console.log('consultores', consultores)\n                let numFiltered = consultores.filter(consultores => (consultores.first_name + consultores.last_name).length > 12)\n\n                let nu_menores = numFiltered.length\n                let total = response.data.total\n\n                this.setState({ percentaje : ((nu_menores*100)/total).toFixed(2) });\n                this.setState({ menores : numFiltered });\n                \n              })\n              .catch(error => {\n                console.log(error)\n                this.errored = true\n              })\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Toolbar />\n                <div className=\"container\">\n                    <div className=\"card mt-2\">\n                        \n                        <div className=\"container mt-2 mb-2\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-6 mr-0\" >\n                                    <div style={{height:'600px'}} className=\"card \" >\n                                        <nav className=\"navbar navbar-dark bg-primary navbar-expand-md\">\n                                            <span className=\"navbar-brand mb-0 h1\">Total ({ this.state.consultores.length })</span>\n                                        </nav>\n                                        <ul className=\"list-group\" style={{overflowY:'auto'}} >\n                                            { this.state.consultores.map((consultor, index) => \n                                              \n                                                <li href=\"#\" key={index} className=\"list-group-item list-group-item-action\">\n                                                  <img height=\"60px\" width=\"60px\" src={consultor.avatar} alt=\"\"></img>\n                                                  {\" \"}\n                                                  { consultor.first_name }{\" \"}\n                                                    { consultor.last_name } - \n                                                    { (consultor.first_name + consultor.last_name).length }\n\n                                                </li>\n                                            )\n                                            }\n                                        </ul>\n                                    </div>\n                                </div>\n                                \n                                <div className=\" col-sm-6 ml-0\" >\n                                    <div className=\"card\" style={{height:'600px'}}>\n                                        <nav className=\"navbar navbar-dark bg-primary navbar-expand-md\">\n                                            <span className=\"navbar-brand mb-0 h1\">Nombre y Apellido +12 car√°cteres ({ this.state.percentaje } %)</span>\n                                        </nav>\n                                        <ul className=\"list-group\" style={{overflowY:'auto'}} >\n                                        { this.state.menores.map((menor, index) => \n                                                <li href=\"#\" key={index} className=\"list-group-item list-group-item-action\">\n                                                  <img height=\"60px\" width=\"60px\" src={menor.avatar} alt=\"\"></img>\n                                                  {\" \"}\n                                                  { menor.first_name }{\" \"}\n                                                    { menor.last_name } - \n                                                  { (menor.first_name + menor.last_name).length }\n                                                </li>\n                                            )\n                                            }\n                                        </ul>\n                                    </div>                            \n                                </div>                            \n                            </div>\n                        </div>\n                        \n\n                    </div>\n               </div>\n            </div>\n            \n        );\n    }\n}\n\nif (document.getElementById('home')) {\n    ReactDOM.render(<Home />, document.getElementById('home'));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}